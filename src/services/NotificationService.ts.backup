import * as Notifications from 'expo-notifications';
import { Platform } from 'react-native';

// Configure notification behavior
Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: true,
    shouldSetBadge: false,
    shouldShowBanner: true,
    shouldShowList: true,
  }),
});

export class NotificationService {
  static async requestPermissions() {
    const { status: existingStatus } = await Notifications.getPermissionsAsync();
    let finalStatus = existingStatus;
    
    if (existingStatus !== 'granted') {
      const { status } = await Notifications.requestPermissionsAsync();
      finalStatus = status;
    }
    
    if (finalStatus !== 'granted') {
      throw new Error('Permission not granted for notifications');
    }
    
    return finalStatus;
  }

  static async getExpoPushToken() {
    try {
      const token = await Notifications.getExpoPushTokenAsync({
        projectId: process.env.EXPO_PROJECT_ID,
      });
      return token.data;
    } catch (error) {
      console.error('Error getting push token:', error);
      throw error;
    }
  }

  static async scheduleLocalNotification(
    title: string,
    body: string,
    data?: any,
    trigger?: Notifications.NotificationTriggerInput
  ) {
    try {
      await Notifications.scheduleNotificationAsync({
        content: {
          title,
          body,
          data,
        },
        trigger: trigger || null,
      });
    } catch (error) {
      console.error('Error scheduling notification:', error);
      throw error;
    }
  }

  static async cancelAllNotifications() {
    try {
      await Notifications.cancelAllScheduledNotificationsAsync();
    } catch (error) {
      console.error('Error canceling notifications:', error);
      throw error;
    }
  }

  static async getBadgeCount() {
    try {
      return await Notifications.getBadgeCountAsync();
    } catch (error) {
      console.error('Error getting badge count:', error);
      return 0;
    }
  }

  static async setBadgeCount(count: number) {
    try {
      await Notifications.setBadgeCountAsync(count);
    } catch (error) {
      console.error('Error setting badge count:', error);
      throw error;
    }
  }

  static addNotificationReceivedListener(
    listener: (notification: Notifications.Notification) => void
  ) {
    return Notifications.addNotificationReceivedListener(listener);
  }

  static addNotificationResponseReceivedListener(
    listener: (response: Notifications.NotificationResponse) => void
  ) {
    return Notifications.addNotificationResponseReceivedListener(listener);
  }

  static removeNotificationSubscription(subscription: Notifications.Subscription) {
    subscription.remove();
  }
  static async scheduleOrderUpdateNotification(orderId: string, status: string) {
    try {
      const title = `Order Update`;
      const body = `Your order #${orderId} has been ${status}`;
      
      await this.scheduleLocalNotification(title, body, {
        orderId,
        status,
        type: 'order_update'
      });
    } catch (error) {
      console.error('Error scheduling order update notification:', error);
      throw error;
    }
  }
}

export default NotificationService;

  static async scheduleOrderUpdateNotification(orderId: string, status: string) {
    try {
      const title = `Order Update`;
      const body = `Your order #${orderId} has been ${status}`;
      
      await this.scheduleLocalNotification(title, body, {
        orderId,
        status,
        type: 'order_update'
      });
    } catch (error) {
      console.error('Error scheduling order update notification:', error);
      throw error;
    }
  }
